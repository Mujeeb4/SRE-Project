---
kind: pipeline
name: default

platform:
  os: linux
  arch: amd64

workspace:
  base: /go
  path: src/code.gitea.io/gitea

steps:
- name: download_translations
  pull: always
  image: jonasfranz/crowdin
  settings:
    download: true
    export_dir: options/locale/
    ignore_branch: true
    project_identifier: gitea
  environment:
    CROWDIN_KEY:
      from_secret: crowdin_key
  when:
    branch:
    - master
    event:
    - push

- name: update-translations
  pull: default
  image: alpine:3.7
  commands:
  - mv ./options/locale/locale_en-US.ini ./options/
  - "sed -i -e 's/=\"/=/g' -e 's/\"$$//g' ./options/locale/*.ini"
  - "sed -i -e 's/\\\\\\\\\"/\"/g' ./options/locale/*.ini"
  - mv ./options/locale_en-US.ini ./options/locale/
  when:
    branch:
    - master
    event:
    - push

- name: git_push
  pull: always
  image: appleboy/drone-git-push
  settings:
    author_email: "teabot@gitea.io"
    author_name: GiteaBot
    commit: true
    commit_message: "[skip ci] Updated translations via Crowdin"
    remote: "git@github.com:go-gitea/gitea.git"
  environment:
    GIT_PUSH_SSH_KEY:
      from_secret: git_push_ssh_key
  when:
    branch:
    - master
    event:
    - push

- name: pre-build
  pull: always
  image: webhippie/nodejs:latest
  commands:
  - npm install
  - make stylesheets-check
  when:
    event:
    - push
    - tag
    - pull_request

- name: build-without-gcc
  pull: always
  image: golang:1.10
  commands:
  - go build -o gitea_no_gcc
  when:
    event:
    - push
    - tag
    - pull_request

- name: build
  pull: always
  image: golang:1.12
  commands:
  - make clean
  - make generate
  - make vet
  - make lint
  - make fmt-check
  - make swagger-check
  - make swagger-validate
  - make misspell-check
  - make test-vendor
  - make build
  environment:
    TAGS: bindata sqlite sqlite_unlock_notify
  when:
    event:
    - push
    - tag
    - pull_request

- name: unit-test
  pull: always
  image: golang:1.12
  commands:
  - make unit-test-coverage
  settings:
    group: test
  environment:
    TAGS: bindata sqlite sqlite_unlock_notify
  when:
    branch:
    - master
    event:
    - push
    - pull_request

- name: release-test
  pull: always
  image: golang:1.12
  commands:
  - make test
  settings:
    group: test
  environment:
    TAGS: bindata sqlite sqlite_unlock_notify
  when:
    branch:
    - "release/*"
    event:
    - push
    - pull_request

- name: tag-test
  pull: always
  image: golang:1.12
  commands:
  - make test
  settings:
    group: test
  environment:
    TAGS: bindata
  when:
    event:
    - tag

- name: test-sqlite
  pull: always
  image: golang:1.12
  commands:
  - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
  - apt-get install -y git-lfs
  - "(sleep 1200 && (echo 'kill -ABRT $(pidof gitea) $(pidof integrations.sqlite.test)' | sh)) &"
  - make test-sqlite-migration
  - make test-sqlite
  settings:
    group: test
  environment:
    TAGS: bindata
  when:
    event:
    - push
    - tag
    - pull_request

- name: test-mysql
  pull: always
  image: golang:1.12
  commands:
  - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
  - apt-get install -y git-lfs
  - make test-mysql-migration
  - make integration-test-coverage
  settings:
    group: test
  environment:
    TAGS: bindata
    TEST_LDAP: 1
  when:
    branch:
    - master
    event:
    - push
    - pull_request

- name: tag-test-mysql
  pull: always
  image: golang:1.12
  commands:
  - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
  - apt-get install -y git-lfs
  - "(sleep 1200 && (echo 'kill -ABRT $(pidof gitea) $(pidof integrations.test)' | sh)) &"
  - make test-mysql-migration
  - make test-mysql
  settings:
    group: test
  environment:
    TAGS: bindata
    TEST_LDAP: 1
  when:
    event:
    - tag

- name: test-mysql8
  pull: always
  image: golang:1.11
  commands:
  - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
  - apt-get install -y git-lfs
  - "(sleep 1200 && (echo 'kill -ABRT $(pidof gitea) $(pidof integrations.test)' | sh)) &"
  - make test-mysql8-migration
  - make test-mysql8
  settings:
    group: test
  environment:
    TAGS: bindata
    TEST_LDAP: 1
  when:
    event:
    - push
    - tag
    - pull_request

- name: test-pgsql
  pull: always
  image: golang:1.12
  commands:
  - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
  - apt-get install -y git-lfs
  - "(sleep 1200 && (echo 'kill -ABRT $(pidof gitea) $(pidof integrations.test)' | sh)) &"
  - make test-pgsql-migration
  - make test-pgsql
  settings:
    group: test
  environment:
    TAGS: bindata
    TEST_LDAP: 1
  when:
    event:
    - push
    - tag
    - pull_request

- name: test-mssql
  pull: always
  image: golang:1.12
  commands:
  - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
  - apt-get install -y git-lfs
  - make test-mssql-migration
  - make test-mssql
  settings:
    group: test
  environment:
    TAGS: bindata
    TEST_LDAP: 1
  when:
    event:
    - push
    - tag
    - pull_request

- name: generate-coverage
  pull: always
  image: golang:1.12
  commands:
  - make coverage
  environment:
    TAGS: bindata
  when:
    branch:
    - master
    event:
    - push
    - pull_request

- name: coverage
  pull: default
  image: robertstettner/drone-codecov
  settings:
    files:
    - coverage.all
  environment:
    CODECOV_TOKEN:
      from_secret: codecov_token
  when:
    branch:
    - master
    event:
    - push
    - pull_request

- name: static
  pull: always
  image: techknowlogick/xgo:latest
  commands:
  - export PATH=$PATH:$GOPATH/bin
  - make release
  environment:
    TAGS: bindata sqlite sqlite_unlock_notify
  when:
    event:
    - push
    - tag

- name: build-docs
  pull: always
  image: webhippie/hugo:latest
  commands:
  - cd docs
  - make trans-copy
  - make clean
  - make build

- name: publish-docs
  pull: always
  image: lucap/drone-netlify:latest
  settings:
    path: docs/public/
    site_id: d2260bae-7861-4c02-8646-8f6440b12672
  environment:
    NETLIFY_TOKEN:
      from_secret: netlify_token
  when:
    branch:
    - master
    event:
    - push

- name: docker-dryrun
  pull: always
  image: plugins/docker:17.12
  settings:
    cache_from: gitea/gitea
    dry_run: true
    repo: gitea/gitea
  when:
    event:
    - pull_request

- name: release-docker
  pull: always
  image: plugins/docker:17.12
  settings:
    cache_from: gitea/gitea
    repo: gitea/gitea
    tags:
    - "${DRONE_BRANCH##release/v}"
  environment:
    DOCKER_PASSWORD:
      from_secret: docker_password
    DOCKER_USERNAME:
      from_secret: docker_username
  when:
    branch:
    - "release/*"
    event:
    - push

- name: docker
  pull: always
  image: plugins/docker:17.12
  settings:
    cache_from: gitea/gitea
    default_tags: true
    repo: gitea/gitea
  environment:
    DOCKER_PASSWORD:
      from_secret: docker_password
    DOCKER_USERNAME:
      from_secret: docker_username
  when:
    event:
    - push
    - tag

- name: gpg-sign
  pull: always
  image: plugins/gpgsign:1
  settings:
    detach_sign: true
    excludes:
    - "dist/release/*.sha256"
    files:
    - "dist/release/*"
  environment:
    GPGSIGN_KEY:
      from_secret: gpgsign_key
    GPGSIGN_PASSPHRASE:
      from_secret: gpgsign_passphrase
  when:
    event:
    - push
    - tag

- name: tag-release
  pull: always
  image: plugins/s3:1
  settings:
    acl: public-read
    bucket: releases
    endpoint: https://storage.gitea.io
    path_style: true
    source: "dist/release/*"
    strip_prefix: dist/release/
    target: "/gitea/${DRONE_TAG##v}"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: aws_access_key_id
    AWS_SECRET_ACCESS_KEY:
      from_secret: aws_secret_access_key
  when:
    event:
    - tag

- name: release-branch-release
  pull: always
  image: plugins/s3:1
  settings:
    acl: public-read
    bucket: releases
    endpoint: https://storage.gitea.io
    path_style: true
    source: "dist/release/*"
    strip_prefix: dist/release/
    target: "/gitea/${DRONE_BRANCH##release/v}"
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: aws_access_key_id
    AWS_SECRET_ACCESS_KEY:
      from_secret: aws_secret_access_key
  when:
    branch:
    - "release/*"
    event:
    - push

- name: release
  pull: always
  image: plugins/s3:1
  settings:
    acl: public-read
    bucket: releases
    endpoint: https://storage.gitea.io
    path_style: true
    source: "dist/release/*"
    strip_prefix: dist/release/
    target: /gitea/master
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: aws_access_key_id
    AWS_SECRET_ACCESS_KEY:
      from_secret: aws_secret_access_key
  when:
    branch:
    - master
    event:
    - push

- name: github
  pull: always
  image: plugins/github-release:1
  settings:
    files:
    - "dist/release/*"
  environment:
    GITHUB_TOKEN:
      from_secret: github_token
  when:
    event:
    - tag

- name: upload_translations
  pull: always
  image: jonasfranz/crowdin
  settings:
    files:
      locale_en-US.ini: options/locale/locale_en-US.ini
    ignore_branch: true
    project_identifier: gitea
  environment:
    CROWDIN_KEY:
      from_secret: crowdin_key
  when:
    branch:
    - master
    event:
    - push

- name: discord
  pull: always
  image: appleboy/drone-discord:1.0.0
  environment:
    DISCORD_WEBHOOK_ID:
      from_secret: discord_webhook_id
    DISCORD_WEBHOOK_TOKEN:
      from_secret: discord_webhook_token
  when:
    event:
    - push
    - tag
    - pull_request
    status:
    - changed
    - failure

services:
- name: mysql
  pull: default
  image: mysql:5.7
  environment:
    MYSQL_ALLOW_EMPTY_PASSWORD: yes
    MYSQL_DATABASE: test
  when:
    event:
    - push
    - tag
    - pull_request

- name: mysql8
  pull: default
  image: mysql:8.0
  environment:
    MYSQL_ALLOW_EMPTY_PASSWORD: yes
    MYSQL_DATABASE: testgitea
  when:
    event:
    - push
    - tag
    - pull_request

- name: pgsql
  pull: default
  image: postgres:9.5
  environment:
    POSTGRES_DB: test
  when:
    event:
    - push
    - tag
    - pull_request

- name: mssql
  pull: default
  image: microsoft/mssql-server-linux:latest
  environment:
    ACCEPT_EULA: Y
    MSSQL_PID: Standard
    SA_PASSWORD: MwantsaSecurePassword1
  when:
    event:
    - push
    - tag
    - pull_request

- name: ldap
  pull: default
  image: gitea/test-openldap:latest
  when:
    event:
    - push
    - tag
    - pull_request

...
