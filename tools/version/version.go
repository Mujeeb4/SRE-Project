// +build tools
package main

import (
	"bytes"
	"go/format"
	"os"
	"os/exec"
	"strings"
	"text/template"
)

func main() {
	// Files that we'll template
	file := "meta.go"

	// VERSION takes priority
	version := os.Getenv("VERSION")
	tags := os.Getenv("TAGS")

	// DRONE_TAG version comes next
	if 0 == len(version) {
		version = strings.TrimLeft(os.Getenv("DRONE_TAG"), "v")
	}

	// Finally, just use version from git
	if 0 == len(version) {
		// Shell out to git to get the version info
		tagcmd := strings.Split("git describe --tags --always", " ")
		cmd := exec.Command(tagcmd[0], tagcmd[1:]...)
		out, err := cmd.CombinedOutput()
		if nil != err {
			panic(strings.Join(tagcmd, " ") + ": " + err.Error() + "\n" + string(out))
		}
		desc := strings.TrimSpace(string(out))
		version = strings.TrimLeft(strings.Replace(desc, "-", "+", -1), "v")
	}

	// Set all version info for templates
	v := Meta{
		Version: version,
		Tags:    tags,
	}

	// Create or overwrite the go file from template
	var buf bytes.Buffer
	if err := tpl.Execute(&buf, v); nil != err {
		panic(err)
	}
	src, err := format.Source(buf.Bytes())
	if nil != err {
		panic(err)
	}
	f, err := os.Create(file)
	if nil != err {
		panic(err)
	}
	defer f.Close()
	f.Write(src)
}

type Meta struct {
	Tags    string
	Version string
}

var tpl = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package main

var (
	// Version holds the current Gitea version
	Version = "{{ .Version }}"
	// Tags holds the build tags used
	Tags = "{{ .Tags }}"
	// MakeVersion holds the current Make version if built with make
	MakeVersion = ""
)
`))
