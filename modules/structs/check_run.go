// Copyright 2023 The Gitea Authors. All rights reserved.
// SPDX-License-Identifier: MIT

package structs

import "time"

type CheckRunStatus string

const (
	// CheckRunStatusQueued queued
	CheckRunStatusQueued CheckRunStatus = "queued"
	// CheckRunStatusInProgress in_progress
	CheckRunStatusInProgress CheckRunStatus = "in_progress"
	// CheckRunStatusQueued completed
	CheckRunStatusCompleted CheckRunStatus = "completed"
)

type CheckRunConclusion string

const (
	// CheckRunConclusionActionRequired action_required
	CheckRunConclusionActionRequired CheckRunConclusion = "action_required"
	// CheckRunConclusionCancelled cancelled
	CheckRunConclusionCancelled CheckRunConclusion = "cancelled"
	// CheckRunConclusionFailure failure
	CheckRunConclusionFailure CheckRunConclusion = "failure"
	// CheckRunConclusionNeutral neutral
	CheckRunConclusionNeutral CheckRunConclusion = "neutral"
	// CheckRunConclusionNeutral success
	CheckRunConclusionSuccess CheckRunConclusion = "success"
	// CheckRunConclusionSkipped skipped
	CheckRunConclusionSkipped CheckRunConclusion = "skipped"
	// CheckRunConclusionStale stale
	CheckRunConclusionStale CheckRunConclusion = "stale"
	// CheckRunConclusionTimedOut timed_out
	CheckRunConclusionTimedOut CheckRunConclusion = "timed_out"
)

type CheckRunAnnotationLevel string

const (
	// CheckRunAnnotationLevelNotice notice
	CheckRunAnnotationLevelNotice CheckRunAnnotationLevel = "notice"
	// CheckRunAnnotationLevelWarning warning
	CheckRunAnnotationLevelWarning CheckRunAnnotationLevel = "warning"
	// CheckRunAnnotationLevelError error
	CheckRunAnnotationLevelError CheckRunAnnotationLevel = "error"
	// CheckRunAnnotationLevelFailure failure
	CheckRunAnnotationLevelFailure CheckRunAnnotationLevel = "failure"
)

func (l CheckRunAnnotationLevel) ToString() string {
	if l == CheckRunAnnotationLevelWarning {
		return "warning"
	}
	if l == CheckRunAnnotationLevelError {
		return "error"
	}
	if l == CheckRunAnnotationLevelFailure {
		return "failure"
	}

	return "notice"
}

func (l CheckRunAnnotationLevel) IsWarning() bool {
	return l == CheckRunAnnotationLevelWarning
}

func (l CheckRunAnnotationLevel) IsError() bool {
	return l == CheckRunAnnotationLevelError
}

func (l CheckRunAnnotationLevel) IsFailure() bool {
	return l == CheckRunAnnotationLevelFailure
}

// CheckRunAnnotation represents an annotation object for a CheckRun output.
type CheckRunAnnotation struct {
	Path            *string                 `json:"path,omitempty"`
	StartLine       *int                    `json:"start_line,omitempty"`
	EndLine         *int                    `json:"end_line,omitempty"`
	StartColumn     *int                    `json:"start_column,omitempty"`
	EndColumn       *int                    `json:"end_column,omitempty"`
	AnnotationLevel CheckRunAnnotationLevel `json:"annotation_level"`
	ExternalID      *string                 `json:"external_id,omitempty"`
	Message         string                  `json:"message"`
	Title           string                  `json:"title"`
	RawDetails      *string                 `json:"raw_details,omitempty"`
	DeleteMark      *bool                   `json:"deleted,omitempty"`  // delete a exist annotation
	AppendMark      *bool                   `json:"appended,omitempty"` // do not update exist annotation
	Index           string                  `json:"index,omitempty"`    // auto generated by server, should not set it while api
	Patch           string                  `json:"patch"`              // auto generated by server, should not set it while api
}

func (a CheckRunAnnotation) ID() string {
	if a.ExternalID != nil {
		return *a.ExternalID
	}

	if len(a.Title) > 0 {
		return a.Title
	}

	return a.Message
}

func (a CheckRunAnnotation) DefaultTitle() string {
	return "check_runs.annotation." + a.AnnotationLevel.ToString()
}

// CheckRunOutput represents the output of a CheckRun.
type CheckRunOutput struct {
	Title            *string               `json:"title,omitempty"`
	Summary          *string               `json:"summary,omitempty"`
	Text             *string               `json:"text,omitempty"`
	AnnotationsCount *int                  `json:"annotations_count,omitempty"`
	AnnotationsURL   *string               `json:"annotations_url,omitempty"`
	Annotations      []*CheckRunAnnotation `json:"annotations,omitempty"`
}

// CreateCheckRunOptions options needed to create a CheckRun.
type CreateCheckRunOptions struct {
	Name       string              `json:"name"`
	HeadSHA    string              `json:"head_sha"`
	DetailsURL *string             `json:"details_url,omitempty"`
	ExternalID *string             `json:"external_id,omitempty"`
	Status     CheckRunStatus      `json:"status"`
	Conclusion *CheckRunConclusion `json:"conclusion,omitempty"`
	// swagger:strfmt date-time
	StartedAt *time.Time `json:"started_at,omitempty"`
	// swagger:strfmt date-time
	CompletedAt *time.Time      `json:"completed_at,omitempty"`
	Output      *CheckRunOutput `json:"output,omitempty"`
}

// UpdateCheckRunOptions options needed to update a CheckRun.
type UpdateCheckRunOptions struct {
	Name       *string             `json:"name,omitempty"`
	DetailsURL *string             `json:"details_url,omitempty"`
	ExternalID *string             `json:"external_id,omitempty"`
	Status     *CheckRunStatus     `json:"status"`
	Conclusion *CheckRunConclusion `json:"conclusion,omitempty"`
	// swagger:strfmt date-time
	StartedAt *time.Time `json:"started_at,omitempty"`
	// swagger:strfmt date-time
	CompletedAt *time.Time      `json:"completed_at,omitempty"`
	Output      *CheckRunOutput `json:"output,omitempty"`
}

// CheckRun represents a check run on a repository
type CheckRun struct {
	ID         int64               `json:"id"`
	NodeID     string              `json:"node_id"`
	HeadSHA    string              `json:"head_sha"`
	ExternalID *string             `json:"external_id,omitempty"`
	URL        *string             `json:"url,omitempty"`
	DetailsURL *string             `json:"details_url,omitempty"`
	Status     *CheckRunStatus     `json:"status,omitempty"`
	Conclusion *CheckRunConclusion `json:"conclusion,omitempty"`
	// swagger:strfmt date-time
	StartedAt *time.Time `json:"started_at,omitempty"`
	// swagger:strfmt date-time
	CompletedAt  *time.Time      `json:"completed_at,omitempty"`
	Output       *CheckRunOutput `json:"output,omitempty"`
	Name         string          `json:"name,omitempty"`
	PullRequests []*PullRequest  `json:"pull_requests,omitempty"`
	Creator      *User           `json:"creator,omitempty"`
}
