diff --git a/traceinit/trace_init.sh b/traceinit/trace_init.sh
new file mode 100755
index 000000000..37f00d802
--- /dev/null
+++ b/traceinit/trace_init.sh
@@ -0,0 +1,10 @@
+#!/bin/bash
+
+find . -type f -name '*.go' -a ! -name traceinit.go -exec grep -l '^func init()' {} "+" | while read file
+do
+
+	sed -i -r '0,/^[ \t]*package/ s-^([ \t]*package.*)$-\1\nimport "code.gitea.io/gitea/traceinit"-;
+0,/^func init\(\)/ s-^(func init\(\).*)$-\1\ntraceinit.Trace("'"$file"'")-' "$file"
+	exit
+
+done
diff --git a/traceinit/traceinit.go b/traceinit/traceinit.go
new file mode 100644
index 000000000..5fa03e587
--- /dev/null
+++ b/traceinit/traceinit.go
@@ -0,0 +1,39 @@
+// Copyright 2014 The Gogs Authors. All rights reserved.
+// Use of this source code is governed by a MIT-style
+// license that can be found in the LICENSE file.
+
+package traceinit
+
+import (
+	"fmt"
+	"log"
+	"os"
+	"time"
+)
+
+const traceFileName = "traceFile.out"
+
+var traceFile *os.File
+var start time.Time
+
+func init() {
+	var err error
+	start = time.Now()
+	if traceFile, err = os.OpenFile("traceinit.out", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644); err != nil {
+		log.Fatal("TraceInit error opening trace file", traceFileName, err)
+	}
+	Trace("traceinit.go")
+}
+
+func Trace(filename string) {
+	current := time.Since(start).Milliseconds()
+	milli := current % 1000
+	current = (current - milli) / 1000
+	second := current % 60
+	current = (current - second) / 60
+	minute := current % 60
+	hour := (current - minute) / 60
+	str := fmt.Sprintf("Trace init() for '%s' - %02d:%02d:%02d.%03d\n", filename, hour, minute, second, milli)
+	_, _ = traceFile.WriteString(str)
+	_ = traceFile.Sync() // Flush
+}
