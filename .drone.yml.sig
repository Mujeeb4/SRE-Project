eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9zcnYvYXBwCiAgcGF0aDogc3JjL2NvZGUuZ2l0ZWEuaW8vZ2l0ZWEKCnBpcGVsaW5lOgogIGNsb25lOgogICAgaW1hZ2U6IHBsdWdpbnMvZ2l0CiAgICBkZXB0aDogNTAKICAgIHRhZ3M6IHRydWUKCiMgICBidWlsZDoKIyAgICAgaW1hZ2U6IHdlYmhpcHBpZS9nb2xhbmc6ZWRnZQojICAgICBwdWxsOiB0cnVlCiMgICAgIGVudmlyb25tZW50OgojICAgICAgIFRBR1M6IGJpbmRhdGEgc3FsaXRlCiMgICAgICAgR09QQVRIOiAvc3J2L2FwcAojICAgICBjb21tYW5kczoKIyAgICAgICAtIGFwayAtVSBhZGQgb3BlbnNzaC1jbGllbnQKIyAgICAgICAtIG1ha2UgY2xlYW4KIyAgICAgICAtIG1ha2UgZ2VuZXJhdGUKIyAgICAgICAtIG1ha2UgdmV0CiMgICAgICAgLSBtYWtlIGxpbnQKIyAgICAgICAtIG1ha2UgdGVzdC12ZW5kb3IKIyAgICAgICAtIG1ha2UgYnVpbGQKIyAgICAgd2hlbjoKIyAgICAgICBldmVudDogWyBwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdCBdCgojICAgdGVzdDoKIyAgICAgaW1hZ2U6IHdlYmhpcHBpZS9nb2xhbmc6ZWRnZQojICAgICBwdWxsOiB0cnVlCiMgICAgIGVudmlyb25tZW50OgojICAgICAgIFRBR1M6IGJpbmRhdGEgc3FsaXRlCiMgICAgICAgR09QQVRIOiAvc3J2L2FwcAojICAgICBjb21tYW5kczoKIyAgICAgICAtIGFwayAtVSBhZGQgb3BlbnNzaC1jbGllbnQKIyAgICAgICAtIG1ha2UgdGVzdAojICAgICB3aGVuOgojICAgICAgIGV2ZW50OiBbIHRhZywgcHVsbF9yZXF1ZXN0IF0KCiMgICB0ZXN0LWNvdmVyYWdlOgojICAgICBpbWFnZTogd2ViaGlwcGllL2dvbGFuZzplZGdlCiMgICAgIHB1bGw6IHRydWUKIyAgICAgZW52aXJvbm1lbnQ6CiMgICAgICAgVEFHUzogYmluZGF0YSBzcWxpdGUKIyAgICAgICBHT1BBVEg6IC9zcnYvYXBwCiMgICAgIGNvbW1hbmRzOgojICAgICAgIC0gYXBrIC1VIGFkZCBvcGVuc3NoLWNsaWVudAojICAgICAgIC0gbWFrZSB0ZXN0LWNvdmVyYWdlCiMgICAgIHdoZW46CiMgICAgICAgZXZlbnQ6IFsgcHVzaCBdCiMgICAgICAgYnJhbmNoOiBtYXN0ZXIKCiMgICB0ZXN0LXNxbGl0ZToKIyAgICAgaW1hZ2U6IHdlYmhpcHBpZS9nb2xhbmc6ZWRnZQojICAgICBwdWxsOiB0cnVlCiMgICAgIGVudmlyb25tZW50OgojICAgICAgIFRBR1M6IGJpbmRhdGEKIyAgICAgICBHT1BBVEg6IC9zcnYvYXBwCiMgICAgIGNvbW1hbmRzOgojICAgICAgIC0gbWFrZSB0ZXN0LXNxbGl0ZQojICAgICB3aGVuOgojICAgICAgIGV2ZW50OiBbIHB1c2gsIHRhZywgcHVsbF9yZXF1ZXN0IF0KCiMgICB0ZXN0LW15c3FsOgojICAgICBpbWFnZTogd2ViaGlwcGllL2dvbGFuZzplZGdlCiMgICAgIHB1bGw6IHRydWUKIyAgICAgZW52aXJvbm1lbnQ6CiMgICAgICAgVEFHUzogYmluZGF0YQojICAgICAgIEdPUEFUSDogL3Nydi9hcHAKIyAgICAgY29tbWFuZHM6CiMgICAgICAgLSBtYWtlIHRlc3QtbXlzcWwKIyAgICAgd2hlbjoKIyAgICAgICBldmVudDogWyBwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdCBdCgojICAgdGVzdC1wZ3NxbDoKIyAgICAgaW1hZ2U6IHdlYmhpcHBpZS9nb2xhbmc6ZWRnZQojICAgICBwdWxsOiB0cnVlCiMgICAgIGVudmlyb25tZW50OgojICAgICAgIFRBR1M6IGJpbmRhdGEKIyAgICAgICBHT1BBVEg6IC9zcnYvYXBwCiMgICAgIGNvbW1hbmRzOgojICAgICAgIC0gbWFrZSB0ZXN0LXBnc3FsCiMgICAgIHdoZW46CiMgICAgICAgZXZlbnQ6IFsgcHVzaCwgdGFnLCBwdWxsX3JlcXVlc3QgXQoKICBzdGF0aWM6CiAgICBpbWFnZTogd2ViaGlwcGllL2dvbGFuZzplZGdlCiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgVEFHUzogYmluZGF0YSBzcWxpdGUKICAgICAgR09QQVRIOiAvc3J2L2FwcAogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSByZWxlYXNlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdCBdCgogIGNvdmVyYWdlOgogICAgaW1hZ2U6IHBsdWdpbnMvY292ZXJhZ2UKICAgIHNlcnZlcjogaHR0cHM6Ly9jb3ZlcmFnZS5naXRlYS5pbwogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCiAgICAgIGJyYW5jaDogbWFzdGVyCgogIGRvY2tlcjoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgcmVwbzogZ2l0ZWEvZ2l0ZWEKICAgIHRhZ3M6IFsgJyR7RFJPTkVfVEFHIyN2fScgXQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgdGFnIF0KICAgICAgYnJhbmNoOiBbIHJlZnMvdGFncy8qIF0KCiAgZG9ja2VyOgogICAgaW1hZ2U6IHBsdWdpbnMvZG9ja2VyCiAgICByZXBvOiBnaXRlYS9naXRlYQogICAgdGFnczogWyAnJHtEUk9ORV9CUkFOQ0gjI3JlbGVhc2Uvdn0nIF0KICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2ggXQogICAgICBicmFuY2g6IFsgcmVsZWFzZS8qIF0KCiAgZG9ja2VyOgogICAgaW1hZ2U6IHBsdWdpbnMvZG9ja2VyCiAgICByZXBvOiBnaXRlYS9naXRlYQogICAgdGFnczogWyAnbGF0ZXN0JyBdCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoIF0KICAgICAgYnJhbmNoOiBbIG1hc3RlciBdCgogIHJlbGVhc2U6CiAgICBpbWFnZTogcGx1Z2lucy9zMwogICAgcGF0aF9zdHlsZTogdHJ1ZQogICAgc3RyaXBfcHJlZml4OiBkaXN0L3JlbGVhc2UvCiAgICBzb3VyY2U6IGRpc3QvcmVsZWFzZS8qCiAgICB0YXJnZXQ6IC9naXRlYS8ke0RST05FX1RBRyMjdn0KICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHRhZyBdCiAgICAgIGJyYW5jaDogWyByZWZzL3RhZ3MvKiBdCgogIHJlbGVhc2U6CiAgICBpbWFnZTogcGx1Z2lucy9zMwogICAgcGF0aF9zdHlsZTogdHJ1ZQogICAgc3RyaXBfcHJlZml4OiBkaXN0L3JlbGVhc2UvCiAgICBzb3VyY2U6IGRpc3QvcmVsZWFzZS8qCiAgICB0YXJnZXQ6IC9naXRlYS8ke0RST05FX0JSQU5DSCMjcmVsZWFzZS92fQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCiAgICAgIGJyYW5jaDogWyByZWxlYXNlLyogXQoKICByZWxlYXNlOgogICAgaW1hZ2U6IHBsdWdpbnMvczMKICAgIHBhdGhfc3R5bGU6IHRydWUKICAgIHN0cmlwX3ByZWZpeDogZGlzdC9yZWxlYXNlLwogICAgc291cmNlOiBkaXN0L3JlbGVhc2UvKgogICAgdGFyZ2V0OiAvZ2l0ZWEvbWFzdGVyCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoIF0KICAgICAgYnJhbmNoOiBbIG1hc3RlciBdCgogIGdpdGh1YjoKICAgIGltYWdlOiBwbHVnaW5zL2dpdGh1Yi1yZWxlYXNlCiAgICBmaWxlczoKICAgICAgLSBkaXN0L3JlbGVhc2UvKgogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgdGFnIF0KICAgICAgYnJhbmNoOiBbIHJlZnMvdGFncy8qIF0KCiAgZ2l0dGVyOgogICAgaW1hZ2U6IHBsdWdpbnMvZ2l0dGVyCgpzZXJ2aWNlczoKICBteXNxbDoKICAgIGltYWdlOiBteXNxbDo1LjcKICAgIGVudmlyb25tZW50OgogICAgICAtIE1ZU1FMX0RBVEFCQVNFPXRlc3QKICAgICAgLSBNWVNRTF9BTExPV19FTVBUWV9QQVNTV09SRD15ZXMKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2gsIHRhZywgcHVsbF9yZXF1ZXN0IF0KCiAgcGdzcWw6CiAgICBpbWFnZTogcG9zdGdyZXM6OS41CiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBQT1NUR1JFU19EQj10ZXN0CiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdCBdCg.-pdYTM32MDLS1DdUHOjni5dYaVw66zvAPMMR5uRGhdQ