eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9zcnYvYXBwCiAgcGF0aDogc3JjL2NvZGUuZ2l0ZWEuaW8vZ2l0ZWEKCnBpcGVsaW5lOgogIGNsb25lOgogICAgaW1hZ2U6IHBsdWdpbnMvZ2l0CiAgICBkZXB0aDogNTAKICAgIHRhZ3M6IHRydWUKCiAgYnVpbGQ6CiAgICBpbWFnZTogd2ViaGlwcGllL2dvbGFuZzplZGdlCiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgVEFHUzogYmluZGF0YSBzcWxpdGUKICAgICAgR09QQVRIOiAvc3J2L2FwcAogICAgY29tbWFuZHM6CiAgICAgIC0gYXBrIC1VIGFkZCBvcGVuc3NoLWNsaWVudAogICAgICAtIG1ha2UgY2xlYW4KICAgICAgLSBtYWtlIGdlbmVyYXRlCiAgICAgIC0gbWFrZSB2ZXQKICAgICAgLSBtYWtlIGxpbnQKICAgICAgLSBtYWtlIHRlc3QtdmVuZG9yCiAgICAgIC0gbWFrZSBidWlsZAogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCwgdGFnLCBwdWxsX3JlcXVlc3QgXQoKIyAgIHRlc3Q6CiMgICAgIGltYWdlOiB3ZWJoaXBwaWUvZ29sYW5nOmVkZ2UKIyAgICAgcHVsbDogdHJ1ZQojICAgICBlbnZpcm9ubWVudDoKIyAgICAgICBUQUdTOiBiaW5kYXRhIHNxbGl0ZQojICAgICAgIEdPUEFUSDogL3Nydi9hcHAKIyAgICAgY29tbWFuZHM6CiMgICAgICAgLSBhcGsgLVUgYWRkIG9wZW5zc2gtY2xpZW50CiMgICAgICAgLSBtYWtlIHRlc3QKIyAgICAgd2hlbjoKIyAgICAgICBldmVudDogWyB0YWcsIHB1bGxfcmVxdWVzdCBdCgojICAgdGVzdC1jb3ZlcmFnZToKIyAgICAgaW1hZ2U6IHdlYmhpcHBpZS9nb2xhbmc6ZWRnZQojICAgICBwdWxsOiB0cnVlCiMgICAgIGVudmlyb25tZW50OgojICAgICAgIFRBR1M6IGJpbmRhdGEgc3FsaXRlCiMgICAgICAgR09QQVRIOiAvc3J2L2FwcAojICAgICBjb21tYW5kczoKIyAgICAgICAtIGFwayAtVSBhZGQgb3BlbnNzaC1jbGllbnQKIyAgICAgICAtIG1ha2UgdGVzdC1jb3ZlcmFnZQojICAgICB3aGVuOgojICAgICAgIGV2ZW50OiBbIHB1c2ggXQojICAgICAgIGJyYW5jaDogbWFzdGVyCgojICAgdGVzdC1zcWxpdGU6CiMgICAgIGltYWdlOiB3ZWJoaXBwaWUvZ29sYW5nOmVkZ2UKIyAgICAgcHVsbDogdHJ1ZQojICAgICBlbnZpcm9ubWVudDoKIyAgICAgICBUQUdTOiBiaW5kYXRhCiMgICAgICAgR09QQVRIOiAvc3J2L2FwcAojICAgICBjb21tYW5kczoKIyAgICAgICAtIG1ha2UgdGVzdC1zcWxpdGUKIyAgICAgd2hlbjoKIyAgICAgICBldmVudDogWyBwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdCBdCgojICAgdGVzdC1teXNxbDoKIyAgICAgaW1hZ2U6IHdlYmhpcHBpZS9nb2xhbmc6ZWRnZQojICAgICBwdWxsOiB0cnVlCiMgICAgIGVudmlyb25tZW50OgojICAgICAgIFRBR1M6IGJpbmRhdGEKIyAgICAgICBHT1BBVEg6IC9zcnYvYXBwCiMgICAgIGNvbW1hbmRzOgojICAgICAgIC0gbWFrZSB0ZXN0LW15c3FsCiMgICAgIHdoZW46CiMgICAgICAgZXZlbnQ6IFsgcHVzaCwgdGFnLCBwdWxsX3JlcXVlc3QgXQoKIyAgIHRlc3QtcGdzcWw6CiMgICAgIGltYWdlOiB3ZWJoaXBwaWUvZ29sYW5nOmVkZ2UKIyAgICAgcHVsbDogdHJ1ZQojICAgICBlbnZpcm9ubWVudDoKIyAgICAgICBUQUdTOiBiaW5kYXRhCiMgICAgICAgR09QQVRIOiAvc3J2L2FwcAojICAgICBjb21tYW5kczoKIyAgICAgICAtIG1ha2UgdGVzdC1wZ3NxbAojICAgICB3aGVuOgojICAgICAgIGV2ZW50OiBbIHB1c2gsIHRhZywgcHVsbF9yZXF1ZXN0IF0KCiAgc3RhdGljOgogICAgaW1hZ2U6IHdlYmhpcHBpZS9nb2xhbmc6ZWRnZQogICAgcHVsbDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIFRBR1M6IGJpbmRhdGEgc3FsaXRlCiAgICAgIEdPUEFUSDogL3Nydi9hcHAKICAgIGNvbW1hbmRzOgogICAgICAtIG1ha2UgcmVsZWFzZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCwgdGFnLCBwdWxsX3JlcXVlc3QgXQoKICBjb3ZlcmFnZToKICAgIGltYWdlOiBwbHVnaW5zL2NvdmVyYWdlCiAgICBzZXJ2ZXI6IGh0dHBzOi8vY292ZXJhZ2UuZ2l0ZWEuaW8KICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2ggXQogICAgICBicmFuY2g6IG1hc3RlcgoKICBkb2NrZXI6CiAgICBpbWFnZTogcGx1Z2lucy9kb2NrZXIKICAgIHJlcG86IGdpdGVhL2dpdGVhCiAgICB0YWdzOiBbICcke0RST05FX1RBRyMjdn0nIF0KICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHRhZyBdCiAgICAgIGJyYW5jaDogWyByZWZzL3RhZ3MvKiBdCgogIGRvY2tlcjoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgcmVwbzogZ2l0ZWEvZ2l0ZWEKICAgIHRhZ3M6IFsgJyR7RFJPTkVfQlJBTkNIIyNyZWxlYXNlL3Z9JyBdCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoIF0KICAgICAgYnJhbmNoOiBbIHJlbGVhc2UvKiBdCgogIGRvY2tlcjoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgcmVwbzogZ2l0ZWEvZ2l0ZWEKICAgIHRhZ3M6IFsgJ2xhdGVzdCcgXQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCiAgICAgIGJyYW5jaDogWyBtYXN0ZXIgXQoKICByZWxlYXNlOgogICAgaW1hZ2U6IHBsdWdpbnMvczMKICAgIHBhdGhfc3R5bGU6IHRydWUKICAgIHN0cmlwX3ByZWZpeDogZGlzdC9yZWxlYXNlLwogICAgc291cmNlOiBkaXN0L3JlbGVhc2UvKgogICAgdGFyZ2V0OiAvZ2l0ZWEvJHtEUk9ORV9UQUcjI3Z9CiAgICB3aGVuOgogICAgICBldmVudDogWyB0YWcgXQogICAgICBicmFuY2g6IFsgcmVmcy90YWdzLyogXQoKICByZWxlYXNlOgogICAgaW1hZ2U6IHBsdWdpbnMvczMKICAgIHBhdGhfc3R5bGU6IHRydWUKICAgIHN0cmlwX3ByZWZpeDogZGlzdC9yZWxlYXNlLwogICAgc291cmNlOiBkaXN0L3JlbGVhc2UvKgogICAgdGFyZ2V0OiAvZ2l0ZWEvJHtEUk9ORV9CUkFOQ0gjI3JlbGVhc2Uvdn0KICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2ggXQogICAgICBicmFuY2g6IFsgcmVsZWFzZS8qIF0KCiAgcmVsZWFzZToKICAgIGltYWdlOiBwbHVnaW5zL3MzCiAgICBwYXRoX3N0eWxlOiB0cnVlCiAgICBzdHJpcF9wcmVmaXg6IGRpc3QvcmVsZWFzZS8KICAgIHNvdXJjZTogZGlzdC9yZWxlYXNlLyoKICAgIHRhcmdldDogL2dpdGVhL21hc3RlcgogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCiAgICAgIGJyYW5jaDogWyBtYXN0ZXIgXQoKICBnaXRodWI6CiAgICBpbWFnZTogcGx1Z2lucy9naXRodWItcmVsZWFzZQogICAgZmlsZXM6CiAgICAgIC0gZGlzdC9yZWxlYXNlLyoKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHRhZyBdCiAgICAgIGJyYW5jaDogWyByZWZzL3RhZ3MvKiBdCgogIGdpdHRlcjoKICAgIGltYWdlOiBwbHVnaW5zL2dpdHRlcgoKc2VydmljZXM6CiAgbXlzcWw6CiAgICBpbWFnZTogbXlzcWw6NS43CiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBNWVNRTF9EQVRBQkFTRT10ZXN0CiAgICAgIC0gTVlTUUxfQUxMT1dfRU1QVFlfUEFTU1dPUkQ9eWVzCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdCBdCgogIHBnc3FsOgogICAgaW1hZ2U6IHBvc3RncmVzOjkuNQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gUE9TVEdSRVNfREI9dGVzdAogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCwgdGFnLCBwdWxsX3JlcXVlc3QgXQo.1_b0v9luiyA-SpYBof5fodhxym0ae_gIst2Fx-SfNkE